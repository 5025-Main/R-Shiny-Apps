CAR_070_Campbell_950 <- read_excel("C:/Users/garrett.mcgurk/Desktop/test/CAR-070 Campbell_950.xlsx",skip = 2)
library(readxl)
CAR_070_Campbell_950 <- read_excel("C:/Users/garrett.mcgurk/Desktop/test/CAR-070 Campbell_950.xlsx",skip = 2)
library(readxl)
CAR_070_Compiled_Level <- read_excel("//sdg1-fs1/SDShare/Projects-South/Environmental - Schaedler/5025-19-W003 CoSDWQ TO 3 Equipment Test Reporting/Data/Data Processing/Python Input/CAR-070/CAR-070 Compiled Level.xlsx")
View(CAR_070_Compiled_Level)
plot(CAR_070_Compiled_Level$Timestamp,CAR_070_Compiled_Level$`Campbell 950 (in)`)
plot(CAR_070_Compiled_Level$Timestamp,CAR_070_Compiled_Level$`Campbell 950 (in)`, type = l)
plot(CAR_070_Compiled_Level$Timestamp,CAR_070_Compiled_Level$`Campbell 950 (in)`, type = "l")
# Rely on the 'WorldPhones' dataset in the datasets
# package (which generally comes preloaded).
library(datasets)
library(datasets)
WorldPhones
input
# Run the app ----
shinyApp(ui = ui, server = server)
runApp('GitHub/R-Shiny-Apps/Test Apps/CAR-070 Instrument Test/server.r')
runApp('GitHub/R-Shiny-Apps/Test Apps/CAR-070 Instrument Test/server.r')
library(readxl)
CAR_070_Compiled_Level <- read_excel("Data/CAR-070 Compiled Level.xlsx")
View(CAR_070_Compiled_Level)
WorldPhones
library(datasets)
WorldPhones
input$region
input=CAR_070_Compiled_Level
input
input$probe
barplot(WorldPhones[,input$region]*1000,
main=input$region,
ylab="Number of Telephones",
xlab="Year")
WorldPhones
runApp('GitHub/R-Shiny-Apps/Test Apps/CAR-070 Instrument Test')
View(CAR_070_Compiled_Level)
CAR_070_Compiled_Level
CAR_070_Compiled_Level= as.data.frame(CAR_070_Compiled_Level)
CAR_070_Compiled_Level
df1 <- data.frame(CAR_070_Compiled_Level[,-1], row.names = CAR_070_Compiled_Level[,1])
CAR_070_Compiled_Level[,-1]
CAR_070_Compiled_Level[,1]
df1 <- data.frame(CAR_070_Compiled_Level[,-1], row.names = CAR_070_Compiled_Level[,1])
library(tidyverse)
CAR_070_Compiled_Level %>%
remove_rownames() %>%
column_to_rownames(var = 'timestamp')
CAR_070_Compiled_Level
runApp('GitHub/R-Shiny-Apps/Test Apps/CAR-070 Instrument Test')
mydir='C:\Users\garrett.mcgurk\Documents\GitHub\R-Shiny-Apps\Test Apps\CAR-072 Flow App\Data'
setwd("mydir")
CAR.072= read.csv('CAR-072-Flow')
mydir='C:\Users\garrett.mcgurk\Documents\GitHub\R-Shiny-Apps\Test Apps\CAR-072 Flow App\Data'
setwd("mydir")
mydir='C:\Users\garrett.mcgurk\Documents\GitHub\R-Shiny-Apps\Test Apps\CAR-072 Flow App\Data'
mydir='C:/Users/garrett.mcgurk/Documents/GitHub/R-Shiny-Apps/Test Apps/CAR-072 Flow App/Data'
setwd("mydir")
wd
mywd
wd
CAR.072= read.csv("CAR-072-Flow.csv")
mydir='C:/Users/garrett.mcgurk/Documents/GitHub/R-Shiny-Apps/Test Apps/CAR-072 Flow App/Data'
setwd("mydir")
mydir='C:/Users/garrett.mcgurk/Documents/GitHub/R-Shiny-Apps/Test Apps/CAR-072 Flow App/Data'
setwd("mydir")
CAR.072= read.csv("C:/Users/garrett.mcgurk/Documents/GitHub/R-Shiny-Apps/Test Apps/CAR-072 Flow App/Data/CAR-072-Flow.csv")
library(shiny); runApp('GitHub/R-Shiny-Apps/Test Apps/car 72 test.R')
data=ts(CAR.072)
#mydir='C:/Users/garrett.mcgurk/Documents/GitHub/R-Shiny-Apps/Test Apps/CAR-072 Flow App/Data'
#setwd("mydir")
in.file= read.csv("C:/Users/garrett.mcgurk/Documents/GitHub/R-Shiny-Apps/Test Apps/CAR-072 Flow App/Data/CAR-072-Flow.csv")
data=in.file
#mydir='C:/Users/garrett.mcgurk/Documents/GitHub/R-Shiny-Apps/Test Apps/CAR-072 Flow App/Data'
#setwd("mydir")
in.file= read.csv("C:/Users/garrett.mcgurk/Documents/GitHub/R-Shiny-Apps/Test Apps/CAR-072 Flow App/Data/CAR-072-Flow.csv")
data=in.file
data
data=ts(data)
class(data)
View(data)
runApp('GitHub/R-Shiny-Apps/Test Apps/car 72 test.R')
View(data)
plot(data)
plot(data,plot.type = c("single"))
in.file= read.csv("C:/Users/garrett.mcgurk/Documents/GitHub/R-Shiny-Apps/Test Apps/CAR-072 Flow App/Data/CAR-072-Flow.csv")
data=in.file
data
data.ts=zoo(data)
library(zoo)
data.ts=zoo(data)
install.packages("zoo")
library(zoo)
data.ts=zoo(data)
data.ts
plot(data$X,data$Level_in)
plot(data$X,data$Level_in,type="l")
plot(data.ts$X,data.ts$Level_in,type="l")
plot(data.ts$X,data.ts$Level_in,type="l")
data.ts$Level_in
data.ts$X
class(data$X)
class(data.ts$X)
class(data$x)
class(data$x)
class(data$x)
data$x
data
data$X
class(data$X)
data$date.time=as.Date(data$X, format="%m/%d/Y %h:%m")
data$date.time
?as.date
?as.date
??as.date
??as.Date
??as.Date
?as.Date
data$date.time=as.Date(data$X, format="%m/%d/%Y %H:%m")
data$date.time
data$X
data$date.time=as.Date(data$X, format="%m/%d/%y %H:%m")
data$date.time
data$X
data$date.time=as.Date(data$X, format="%m/%d/%Y %H:%m")
data$date.time[1:20]
data$date.time=as.Date(data$X, format="%m/%d/%Y  %H:%m")
data$date.time[1:20]
data$date.time=as.Date(data$X, format="%m/%d/%Y %H:%m")
data$date.time
data$X
data$X=as.character(data$X)
data$X
data$date.time=as.Date(data$X, format="%m/%d/%Y %H:%m")
data$date.time[1:20]
class(data$X)
data$date.time=as.Date(data$X, format="%m/%d/%Y%H:%m")
data$date.time[1:20]
data$date.time=as.Date(data$X) #format="%m/%d/%Y %H:%m")
data$date.time[1:20]
data$date.time=as.Date(data$X format="%m/%d/%Y %H:%m")
data$date.time[1:20]
data$date.time=as.Date(data$X format="%m/%d/%Y %H:%m")
data$date.time[1:20]
data$date.time=as.Date(data$X, format="%m/%d/%Y %H:%m")
data$date.time[1:20]
data$X
data$date.time=as.Date(data$X, format="%m/%d/%Y %H:%M")
data$date.time[1:20]
data$date.time[1:20]
data$date.time=as.Date(data$X, format="%m/%d/%Y %I:%M")
data$date.time[1:20]
data$date.time=as.Date(data$X, format="%m/%d/%Y %H:%M")
data$date.time[1:20]
data$X
data$date.time=as.Date(data$X, format="%m/%d/%Y %H:%M")
data$date.time[1:20]
data$date.time=as.Date(data$X, format="%m/%d/%Y %I:%M")
data$date.time[1:20]
data$date.time=as.Date(data$X, format="%m/%d/%Y %H:%M")
data$date.time[1:20]
in.file= read.csv("C:/Users/garrett.mcgurk/Documents/GitHub/R-Shiny-Apps/Test Apps/CAR-072 Flow App/Data/CAR-072-Flow.csv")
data=in.file
class(data$X)
data$date.time=as.Date(data$X, format="%m/%d/%Y %H:%M")
data$date.time[1:20]
data$X=as.character(data$X)
data$X
data$date.time=as.Date(data$X, format="%m/%d/%Y %H:%M")
data$date.time[1:20]
class(data$date.time)
plot(data$date.time,data$Level_in,type="l")
View(data)
data$date.time=as.POSIXct(data$X)
data$date.time[1:20]
plot(data$date.time,data$Level_in)
plot(data$date.time,data$Level_in,type = "l")
runApp('GitHub/R-Shiny-Apps/Test Apps')
install.packages("zoo")
runApp('GitHub/R-Shiny-Apps/Test Apps/CAR-072 Flow App')
install.packages("zoo")
runApp('GitHub/R-Shiny-Apps/Test Apps/CAR-072 Flow App')
runApp('GitHub/R-Shiny-Apps/Test Apps/CAR-072 Flow App')
runApp('GitHub/R-Shiny-Apps/Test Apps/CAR-072 Flow App')
shiny::runApp('GitHub/R-Shiny-Apps/Test Apps/Level and Flow App (all sites)')
library(readxl)
CAR_070_working_draft <- read_excel("P:/Projects-South/Environmental - Schaedler/5025-19-W006 CoSDWQ TO6 Low Flow Monitoring/DATA/Data Deliverables/Monthly Flow Data Deliverable/May/CAR-070-working draft.xlsx",
sheet = "CAR-070-flow")
View(CAR_070_working_draft)
library(readxl)
CAR_070_working_draft <- read_excel("P:/Projects-South/Environmental - Schaedler/5025-19-W006 CoSDWQ TO6 Low Flow Monitoring/DATA/Data Deliverables/Monthly Flow Data Deliverable/May/CAR-070-working draft.xlsx",
sheet = "CAR-070-flow")
View(CAR_070_working_draft)
library(readxl)
CAR_070_working_draft <- read_excel("P:/Projects-South/Environmental - Schaedler/5025-19-W006 CoSDWQ TO6 Low Flow Monitoring/DATA/Data Deliverables/Monthly Flow Data Deliverable/May/CAR-070-working draft.xlsx",
sheet = "CAR-070-flow")
View(CAR_070_working_draft)
data=CAR_070_working_draft
data
data=as.data.frame(data)
data
plot(data$...1,data$`Flow compound weir stormflow clipped (gpm)`)
plot(data$...1,data$`Flow compound weir stormflow clipped (gpm)`,type="l")
lines(data$...1,data$`Flow compound weir (gpm)`,col="red")
plot(data$...1,data$`Flow compound weir stormflow clipped (gpm)`,type="l")
lines(data$...1,data$`Flow compound weir (gpm)`,col="red")
lines(data$...1,data$`Flow compound weir (gpm)`,lty=2)
plot(data$...1,data$`Flow compound weir stormflow clipped (gpm)`,type="l")
lines(data$...1,data$`Flow compound weir (gpm)`,lty=2)
plot(data$...1,data$`Flow compound weir stormflow clipped (gpm)`,type="l")
lines(data$...1,data$`Flow compound weir (gpm)`,lty=2)
CAR_070_calibration <- read_excel("P:/Projects-South/Environmental - Schaedler/5025-19-W006 CoSDWQ TO6 Low Flow Monitoring/DATA/Data Processing/4 - Level calibration files and figures/Data Output 05_31_2019/CAR-070-calibration.xlsx",
sheet = "Flow calibration")
View(CAR_070_calibration)
cal.data=CAR_070_calibration
cal.data=as.data.frame(cal.data)
cal.data
?cbind
?merge
?cbind
?merge
#read in flow data
CAR_070_working_draft <- read_excel("P:/Projects-South/Environmental - Schaedler/5025-19-W006 CoSDWQ TO6 Low Flow Monitoring/DATA/Data Deliverables/Monthly Flow Data Deliverable/May/CAR-070-working draft.xlsx",
sheet = "CAR-070-flow")
flow.data=CAR_070_working_draft
flow.data=as.data.frame(flow.data)
#read in calibration data
CAR_070_calibration <- read_excel("P:/Projects-South/Environmental - Schaedler/5025-19-W006 CoSDWQ TO6 Low Flow Monitoring/DATA/Data Processing/4 - Level calibration files and figures/Data Output 05_31_2019/CAR-070-calibration.xlsx",
sheet = "Flow calibration")
cal.data=CAR_070_calibration
cal.data=as.data.frame(cal.data)
flow.data
names(flow.data)[1]<-"Datetime"
head(flow.data)
#combine cal data with flow data
new.df=merge(flow.data,cal.data, by.x = "Datetime")
new.df
library(readxl)
plot(new.df$`Flow compound weir stormflow clipped (gpm)`,new.df$Flow_gpm_1)
new.df$Flow_gpm_1
plot(new.df$`Flow compound weir stormflow clipped (gpm)`,new.df$Flow_gpm_1)
points(new.df$`Flow compound weir stormflow clipped (gpm)`,new.df$Flow_gpm_2)
points(new.df$`Flow compound weir stormflow clipped (gpm)`,new.df$Flow_gpm_3)
plot(new.df$`Flow compound weir stormflow clipped (gpm)`,new.df$Flow_gpm_1)
points(new.df$`Flow compound weir stormflow clipped (gpm)`,new.df$Flow_gpm_2)
points(new.df$`Flow compound weir stormflow clipped (gpm)`,new.df$Flow_gpm_3)
abline(0, 1)
plot(new.df$`Flow compound weir stormflow clipped (gpm)`,new.df$Flow_gpm_1, xlim = 0,ylim = 0)
plot(new.df$`Flow compound weir stormflow clipped (gpm)`,new.df$Flow_gpm_1, xlim = c(0,10) ,ylim = c(0,10))
points(new.df$`Flow compound weir stormflow clipped (gpm)`,new.df$Flow_gpm_2)
points(new.df$`Flow compound weir stormflow clipped (gpm)`,new.df$Flow_gpm_3)
abline(0, 1)
plot(new.df$`Flow compound weir stormflow clipped (gpm)`,new.df$Flow_gpm_1, xlim = c(0,5) ,ylim = c(0,5))
points(new.df$`Flow compound weir stormflow clipped (gpm)`,new.df$Flow_gpm_2)
points(new.df$`Flow compound weir stormflow clipped (gpm)`,new.df$Flow_gpm_3)
abline(0, 1)
plot(new.df$`Flow compound weir stormflow clipped (gpm)`,new.df$Flow_gpm_1, xlim = c(0,5) ,ylim = c(0,5),xlab = "Predicted Flow clipped, (gpm)",ylab = "Measured flow, (gpm)")
points(new.df$`Flow compound weir stormflow clipped (gpm)`,new.df$Flow_gpm_2)
points(new.df$`Flow compound weir stormflow clipped (gpm)`,new.df$Flow_gpm_3)
abline(0, 1)
runApp('GitHub/R-Shiny-Apps/Applications/QA_plot')
SDG.085_compiled <- read.csv("~/GitHub/R-Shiny-Apps/Applications/QA_plot/Data/Compiled Calibrations/SDG-085_compiled.csv")
View(SDG.085_compiled)
plot(SDG.085_compiled$Flow..gpm..no.stormflow,SDG.085_compiled$Flow_gpm_1)
lines(SDG.085_compiled$Flow..gpm..no.stormflow,SDG.085_compiled$Flow_gpm_2)
abline(0,1)
library(readxl)
library(ggplot2)
library(plotly)
install.packages("plotly")
library(plotly)
p <- ggplot(SDG.085_compiled, aes(Flow..gpm..no.stormflow, Flow_gpm_1)) + geom_point()
ggplotly(p)
shiny::runApp('GitHub/R-Shiny-Apps/Applications/QA_plot')
runApp('GitHub/R-Shiny-Apps/Applications/QA_plot')
runApp('GitHub/R-Shiny-Apps/Applications/QA_plot')
runApp('GitHub/R-Shiny-Apps/Applications/QA_plot')
runApp('GitHub/R-Shiny-Apps/Applications/QA_plot')
View(data)
View(data)
runApp('GitHub/R-Shiny-Apps/Applications/QA_plot')
View(data)
View(flowpoints)
View(SDG.085_compiled)
View(SDG.085_compiled)
runApp('GitHub/R-Shiny-Apps/Applications/QA_plot')
plot(SDG.085_compiled$Flow..gpm..no.stormflow,SDG.085_compiled$Flow_gpm_1)
runApp('GitHub/R-Shiny-Apps/Applications/QA_plot')
runApp('GitHub/R-Shiny-Apps/Applications/QA_plot')
shiny::runApp('GitHub/R-Shiny-Apps/Applications/QA_plot')
runApp('~/GitHub/R-Shiny-Apps/Applications/Full_QC_App')
install.packages("leaflet")
library(leaflet)
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=174.768, lat=-36.852, popup="The birthplace of R")
m  # Print the map
library(readxl)
X2019_MS4_Sites <- read_excel("C:/Users/garrett.mcgurk/Desktop/2019_MS4 Sites.xlsx")
View(X2019_MS4_Sites)
X2019_MS4_Sites [c(9,14)]
sites.2019= X2019_MS4_Sites [c(9,14)]
sites.2019=as.data.frame(sites.2019)
sites.2019
sapply(strsplit(sites.2019$`ns1:coordinates`,","),"[",1)
sapply(strsplit(sites.2019$`ns1:coordinates`,","),"[",2)
sites.2019$Long=sapply(strsplit(sites.2019$`ns1:coordinates`,","),"[",1)
sites.2019$Lat=sapply(strsplit(sites.2019$`ns1:coordinates`,","),"[",2)
sites.2019
sites.2019$long=sapply(strsplit(sites.2019$`ns1:coordinates`,","),"[",1)
sites.2019$lat=sapply(strsplit(sites.2019$`ns1:coordinates`,","),"[",2)
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addCircles(sites.2019)
sites.2019$lng=sapply(strsplit(sites.2019$`ns1:coordinates`,","),"[",1)
sites.2019$lat=sapply(strsplit(sites.2019$`ns1:coordinates`,","),"[",2)
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addCircles(sites.2019)
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addCircles(sites.2019,lat = ~ Lat, lng = ~ Lng)
m  # Print the map
sites.2019
library(readxl)
X2019_MS4_Sites <- read_excel("C:/Users/garrett.mcgurk/Desktop/2019_MS4 Sites.xlsx")
sites.2019= X2019_MS4_Sites [c(9,14)]
sites.2019=as.data.frame(sites.2019)
sites.2019$lng=sapply(strsplit(sites.2019$`ns1:coordinates`,","),"[",1)
sites.2019$lat=sapply(strsplit(sites.2019$`ns1:coordinates`,","),"[",2)
sites.2019
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addCircles(sites.2019,lat = ~ Lat, lng = ~ Lng)
class(sites.2019$lng)
sites.2019$lng=as.numeric(sites.2019$lng)
sites.2019$lat=as.numeric(sites.2019$lat)
class(sites.2019$lng)
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addCircles(sites.2019,lat = ~ Lat, lng = ~ Lng)
m  # Print the map
leaflet(sites.2019) %>% addCircles()
leaflet(sites.2019) %>%addTiles() %>% addCircles()
runApp('GitHub/R-Shiny-Apps/Applications/Full_QC_App')
install.packages("shinythemes")
install.packages("shinythemes")
runApp('GitHub/R-Shiny-Apps/Applications/Full_QC_App')
m <- leaflet() %>%
addTiles() %>%
addMarkers(sites.2019,lat = ~ Lat, lng = ~ Lng, label = sites.2019$`ns1:name3`)
m
m <- leaflet() %>%
addTiles() %>%
addMarkers(sites.2019$lng,sites.2019$lat, label = sites.2019$`ns1:name3`)
m
runApp('GitHub/R-Shiny-Apps/Applications/Full_QC_App')
?nom
??nom
?subset
sites.2019[grep("CAR-015", sites.2019$`ns1:name3`),]
sites.2019$`ns1:name3`
sites.2019[grep("CAR-069", sites.2019$`ns1:name3`),]
runApp('GitHub/R-Shiny-Apps/Applications/Full_QC_App')
site.subset=sites.2019[grep("CAR-069", sites.2019$`ns1:name3`),]
View(site.subset)
runApp('GitHub/R-Shiny-Apps/Applications/Full_QC_App')
site.yo="CAR-069"
site.yo="CAR-069"
site.subset=sites.2019[grep(site.yo, sites.2019$`ns1:name3`),]
site.subset
site.yo="CAR-070"
site.subset=sites.2019[grep(site.yo, sites.2019$`ns1:name3`),]
site.subset
runApp('GitHub/R-Shiny-Apps/Applications/Full_QC_App')
site.subset[1,]
runApp('GitHub/R-Shiny-Apps/Applications/Full_QC_App')
rm(list = ls())
#read in flow data
CAR_070_working_draft <- read_excel("P:/Projects-South/Environmental - Schaedler/5025-19-W006 CoSDWQ TO6 Low Flow Monitoring/DATA/Data Deliverables/Monthly Flow Data Deliverable/May/CAR-070-working draft.xlsx",
sheet = "CAR-070-flow")
flow.data=CAR_070_working_draft
flow.data=as.data.frame(flow.data)
names(flow.data)[1]<-"Datetime"
head(flow.data)
#read in calibration data
CAR_070_calibration <- read_excel("P:/Projects-South/Environmental - Schaedler/5025-19-W006 CoSDWQ TO6 Low Flow Monitoring/DATA/Data Processing/4 - Level calibration files and figures/Data Output 05_31_2019/CAR-070-calibration.xlsx",
sheet = "Flow calibration")
cal.data=CAR_070_calibration
cal.data=as.data.frame(cal.data)
SDG.085_compiled <- read.csv("~/GitHub/R-Shiny-Apps/Applications/QA_plot/Data/Compiled Calibrations/SDG-085-compiled.csv")
#plot hydrograph
plot(data$...1,data$`Flow compound weir stormflow clipped (gpm)`,type="l")
lines(data$...1,data$`Flow compound weir (gpm)`,lty=2)
plot(SDG.085_compiled$Flow..gpm..no.stormflow,SDG.085_compiled$Flow_gpm_1)
lines(SDG.085_compiled$Flow..gpm..no.stormflow,SDG.085_compiled$Flow_gpm_2)
abline(0,1)
head(SDG.085_compiled)
SDG.085_compiled$test=SDG.085_compiled$Flow..gpm..no.stormflow
df3 <- SDG.085_compiled %>%
select(Datetime,Flow..gpm..no.stormflow, Flow_gpm_1,Flow_gpm_2,Flow_gpm_3) %>%
gather(key = "variable", value = "value", -Datetime,-Flow..gpm..no.stormflow)
return(df3)
#RMSE
rmse <- function(error)
{
sqrt(mean(error^2,na.rm=TRUE))
}
mean(error,na.rm=TRUE)
error <-df3$value- df3$Flow..gpm..no.stormflow
rmse.cal=rmse(error)
??metrics
g <- ggplot(df3, aes(x=Flow..gpm..no.stormflow,y= value, text= paste("Manual Measurement Date :", Datetime )))+geom_point()+
geom_abline(intercept=0, slope= 1)+
geom_text(x = 3, y = 15,label=rmse.cal,parse = TRUE)
#geom_point(data = df3, aes(x = Flow..gpm..no.stormflow, y = Flow_gpm_2))+
#geom_point(data = df3, aes(x = Flow..gpm..no.stormflow, y = Flow_gpm_3))
ggplotly(g)
level.df <- SDG.085_compiled %>%
select(Datetime,Flow..gpm..no.stormflow, Flow_gpm_1,Flow_gpm_2,Flow_gpm_3) %>%
gather(key = "variable", value = "value", -Datetime,-Flow..gpm..no.stormflow)
return(df3)
View(SDG.085_compiled)
CAR.070.compiled <- read.csv("~/GitHub/R-Shiny-Apps/Applications/Full_QC_App/Data/Compiled Calibrations/CAR-070-compiled.csv")
View(CAR.070.compiled)
-
CAR.070.compiled <- read.csv("~/GitHub/R-Shiny-Apps/Applications/Full_QC_App/Data/Compiled Calibrations/CAR-070-compiled.csv")
CAR.070.compiled <- read.csv("~/GitHub/R-Shiny-Apps/Applications/Full_QC_App/Data/Compiled Calibrations/CAR-070-compiled.csv")
View(CAR.070.compiled)
rm(list = ls())
CAR.070.compiled <- read.csv("~/GitHub/R-Shiny-Apps/Applications/Full_QC_App/Data/Compiled Calibrations/CAR-070-compiled.csv")
View(CAR.070.compiled)
CAR.070.compiled <- read.csv("~/GitHub/R-Shiny-Apps/Applications/Full_QC_App/Data/Compiled Calibrations/CAR-070-compiled.csv")
View(CAR.070.compiled)
level.df <- SDG.085_compiled %>%
select(Datetime,Level_in_clipped, Level_above_V_in_Before) %>%
gather(key = "variable", value = "level.in", -Datetime)
level.df <- CAR.070.compiled %>%
select(Datetime,Level_in_clipped, Level_above_V_in_Before) %>%
gather(key = "variable", value = "level.in", -Datetime)
View(level.df)
h <- ggplot(level.df, aes(x=Level_above_V_in_Before,y= Level_in_clipped, text= paste("Manual Measurement Date :", Datetime )))+geom_point()+
geom_abline(intercept=0, slope= 1)+
geom_text(x = 3, y = 15,label=rmse.cal,parse = TRUE)
h <- ggplot(level.df, aes(x=Level_above_V_in_Before,y= Level_in_clipped, text= paste("Manual Measurement Date :", Datetime )))+geom_point()+
geom_abline(intercept=0, slope= 1)+
# geom_text(x = 3, y = 15,label=rmse.cal,parse = TRUE)
ggplotly(h)
library(readxl)
library(Metrics)
library(ggplot2)
#install.packages("plotly")
library(plotly)
install.packages("Metrics")
install.packages("Metrics")
h <- ggplot(level.df, aes(x=Level_above_V_in_Before,y= Level_in_clipped, text= paste("Manual Measurement Date :", Datetime )))+geom_point()+
geom_abline(intercept=0, slope= 1)+
# geom_text(x = 3, y = 15,label=rmse.cal,parse = TRUE)
ggplotly(h)
h <- ggplot(level.df, aes(x=Level_above_V_in_Before,y= Level_in_clipped, text= paste("Manual Measurement Date :", Datetime )))+geom_point()+
geom_abline(intercept=0, slope= 1)#+
ggplotly(h)
View(level.df)
level.df <- CAR.070.compiled %>%
select(Datetime,Level_in_clipped, Level_above_V_in_Before) %>%
# gather(key = "variable", value = "level.in", -Datetime)
return(df3)
level.df <- CAR.070.compiled %>%
select(Datetime,Level_in_clipped, Level_above_V_in_Before) #%>%
View(level.df)
h <- ggplot(level.df, aes(x=Level_above_V_in_Before,y= Level_in_clipped, text= paste("Manual Measurement Date :", Datetime )))+geom_point()+
geom_abline(intercept=0, slope= 1)#+
ggplotly(h)
runApp('GitHub/R-Shiny-Apps/Applications/Full_QC_App')
runApp('GitHub/R-Shiny-Apps/Applications/Full_QC_App')
View(output)
runApp()
runApp('GitHub/R-Shiny-Apps/Applications/Full_QC_App')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('GitHub/R-Shiny-Apps/Applications/Full_QC_App')
runApp('GitHub/R-Shiny-Apps/Applications/Full_QC_App')
options(shiny.reactlog=TRUE)
shiny::runApp()
runApp()
runApp()
runApp()
runApp('~/GitHub/R-Shiny-Apps/Applications/Level and Flow App (all sites)')
runApp('~/GitHub/R-Shiny-Apps/Applications/Full_QC_App')
runApp()
View(data)
n
n
n
n
n
n
n
c
c
c
c
c
c
c
c
c
runApp()
runApp()
