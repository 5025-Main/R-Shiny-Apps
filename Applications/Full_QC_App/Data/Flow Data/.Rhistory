library(ggplot2)
#install.packages("plotly")
library(plotly)
install.packages("Metrics")
install.packages("Metrics")
h <- ggplot(level.df, aes(x=Level_above_V_in_Before,y= Level_in_clipped, text= paste("Manual Measurement Date :", Datetime )))+geom_point()+
geom_abline(intercept=0, slope= 1)+
# geom_text(x = 3, y = 15,label=rmse.cal,parse = TRUE)
ggplotly(h)
h <- ggplot(level.df, aes(x=Level_above_V_in_Before,y= Level_in_clipped, text= paste("Manual Measurement Date :", Datetime )))+geom_point()+
geom_abline(intercept=0, slope= 1)#+
ggplotly(h)
View(level.df)
level.df <- CAR.070.compiled %>%
select(Datetime,Level_in_clipped, Level_above_V_in_Before) %>%
# gather(key = "variable", value = "level.in", -Datetime)
return(df3)
level.df <- CAR.070.compiled %>%
select(Datetime,Level_in_clipped, Level_above_V_in_Before) #%>%
View(level.df)
h <- ggplot(level.df, aes(x=Level_above_V_in_Before,y= Level_in_clipped, text= paste("Manual Measurement Date :", Datetime )))+geom_point()+
geom_abline(intercept=0, slope= 1)#+
ggplotly(h)
runApp('GitHub/R-Shiny-Apps/Applications/Full_QC_App')
runApp('GitHub/R-Shiny-Apps/Applications/Full_QC_App')
View(output)
runApp()
runApp('GitHub/R-Shiny-Apps/Applications/Full_QC_App')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('GitHub/R-Shiny-Apps/Applications/Full_QC_App')
runApp('GitHub/R-Shiny-Apps/Applications/Full_QC_App')
options(shiny.reactlog=TRUE)
shiny::runApp()
runApp()
runApp()
runApp()
runApp('~/GitHub/R-Shiny-Apps/Applications/Level and Flow App (all sites)')
runApp('~/GitHub/R-Shiny-Apps/Applications/Full_QC_App')
runApp()
View(data)
n
n
n
n
n
n
n
c
c
c
c
c
c
c
c
c
runApp()
runApp()
shiny::runApp()
runApp('~/GitHub/R-Shiny-Apps/Applications/QA_plot')
runApp()
runApp()
runApp()
runApp()
install.packages("scales")
install.packages("scales")
shiny::runApp()
runApp()
install.packages("scales")
install.packages("scales")
runApp()
packageVersion('plotly')
runApp()
classesToAM()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
text= CAR-015-Flow.csv
text= "CAR-015-Flow.csv"
sub(".*-", "", text)
?sub
sub("*-", "", text)
sub("*-.", "", text)
sub(".*-", "", text)
sapply(strsplit(text, "-"), "[", 2)
sapply(strsplit(text, "-"), "[", c(1,2))
sapply(strsplit(text, "-"), "[", c(1:2))
sapply(strsplit(text, "-"),  c(1:2))
wut=sapply(strsplit(text, "-")#, "[", c(1:2))
wut
wut[[1]][2]
wut=sapply(strsplit(text, "-")#, "[", c(1:2))
wut=sapply(strsplit(text, "-"))#, "[", c(1:2))
wut<-sapply(strsplit(text, "-"))#, "[", c(1:2))
wut<-sapply(strsplit(text, "-"))#, "[", c(1:2))
u
wut<-sapply(strsplit(text, "-")), "[")#, c(1:2))
wut<-sapply(strsplit(text, "-")), "[", 2)
wut=sapply(strsplit(text, "-")), "[", 2)
wut=sapply(strsplit(text, "-"), "[", 2)
wut=sapply(strsplit(text, "-"))
wut=sapply(strsplit(text, "-"), "[", c(1:2))
wut1=sapply(strsplit(text, "-"), "[", 1)
wut2=sapply(strsplit(text, "-"), "[", 2)
paste(wut1,"-",wut2)
?paste
paste(wut1,"-",wut2,sep = "")
runApp()
library(profvis)
install.packages("profvis")
library(profvis)
profvis(runApp)
profvis(runApp())
profvis(runApp())
profvis(runApp())
profvis(runApp())
CAR.015.Flow <- read.csv("~/GitHub/R-Shiny-Apps/Applications/Full_QC_App/Data/Flow Data/CAR-015-Flow.csv")
View(CAR.015.Flow)
setwd("~/GitHub/R-Shiny-Apps/Applications/Full_QC_App/Data/Flow Data/")
ldf <- list() # creates a list
listcsv <- dir(pattern = "*.csv") # creates the list of all the csv files in the directory
setwd("~/GitHub/R-Shiny-Apps/Applications/Full_QC_App/Data/Flow Data/")
ldf <- list() # creates a list
listcsv <- dir(pattern = "*.csv") # creates the list of all the csv files in the directory
for (k in 1:length(listcsv)){
ldf[[k]] <- read.csv(listcsv[k])
}
str(ldf[[1]])
runApp('~/GitHub/R-Shiny-Apps/Applications/Full_QC_App')
?write.csv
for (k in 1:length(listcsv)){
ldf[[k]] <- read.csv(listcsv[k])
ldf[[k]]=data
data$X=as.character(data$X)
data$date.time=as.POSIXct(strptime(data$X, format="%Y-%m-%d %H:%M:%S"))
write.csv(data,file=paste(listcsv[k]),"dttime"))
}
for (k in 1:length(listcsv)){
ldf[[k]] <- read.csv(listcsv[k])
ldf[[k]]=data
data$X=as.character(data$X)
data$date.time=as.POSIXct(strptime(data$X, format="%Y-%m-%d %H:%M:%S"))
write.csv(data,file=paste(listcsv[k]),"dttime"))
}
for (k in 1:length(listcsv)){
ldf[[k]] <- read.csv(listcsv[k])
ldf[[k]]=data
data$X=as.character(data$X)
data$date.time=as.POSIXct(strptime(data$X, format="%Y-%m-%d %H:%M:%S"))
write.csv(data,file=paste(listcsv[k],"dttime"))
}
View(CAR.015.Flow)
k="CAR-015-Flow.csv"
ldf[[k]] <- read.csv(listcsv[k])
k=1
ldf[[k]] <- read.csv(listcsv[k])
#ldf[[k]] <- read.csv(listcsv[k])
ldf[[k]]=data
data
#ldf[[k]] <- read.csv(listcsv[k])
ldf[[k]]=data
data=as.data.frame(data)
#ldf[[k]] <- read.csv(listcsv[k])
ldf[[k]]=fg
#ldf[[k]] <- read.csv(listcsv[k])
ldf[[k]]=fg
#ldf[[k]] <- read.csv(listcsv[k])
data=ldf[[k]]
data
k=1
ldf[[k]] <- read.csv(listcsv[k])
data = read.csv(listcsv[k])
data
#ldf[[k]] <- read.csv(listcsv[k])
data$X=as.character(data$X)
data$date.time=as.POSIXct(strptime(data$X, format="%Y-%m-%d %H:%M:%S"))
for (k in 1:length(listcsv)){
data = read.csv(listcsv[k])
data$X=as.character(data$X)
data$date.time=as.POSIXct(strptime(data$X, format="%Y-%m-%d %H:%M:%S"))
write.csv(data,file=paste(listcsv[k],"dttime",".csv"))
}
data
View(data)
data = read.csv(listcsv[k])
data$X=as.character(data$X)
data$date.time=as.POSIXct(strptime(data$X, format="%Y-%m-%d %H:%M:%S"))
data = subset(data, select = -c(X) )
View(data)
data = subset(data, select = -c(X) )
col_idx <- grep("date.time", names(data))
data = subset(data, select = -c(X) )
View(data)
col_idx <- grep("date.time", names(data))
col_idx
col_idx <- grep("date.time", names(data))
df <- df[, c(col_idx, (1:ncol(df))[-col_idx])]
data <- data[, c(col_idx, (1:ncol(data))[-col_idx])]
data
data = read.csv(listcsv[k])
data
for (k in 1:length(listcsv)){
data = read.csv(listcsv[k])
data$X=as.character(data$X)
data$date.time=as.POSIXct(strptime(data$X, format="%Y-%m-%d %H:%M:%S"))
data = subset(data, select = -c(X) )
col_idx <- grep("date.time", names(data))
data <- data[, c(col_idx, (1:ncol(data))[-col_idx])]
write.csv(df,C:/Users/garrett.mcgurk/Documents/GitHub/R-Shiny-Apps/Applications/Full_QC_App/Data/Flow Data_dtime formatted,file=paste(listcsv[k],"dttime",".csv"))
}
for (k in 1:length(listcsv)){
data = read.csv(listcsv[k])
data$X=as.character(data$X)
data$date.time=as.POSIXct(strptime(data$X, format="%Y-%m-%d %H:%M:%S"))
data = subset(data, select = -c(X) )
col_idx <- grep("date.time", names(data))
data <- data[, c(col_idx, (1:ncol(data))[-col_idx])]
write.csv(df,'C:/Users/garrett.mcgurk/Documents/GitHub/R-Shiny-Apps/Applications/Full_QC_App/Data/Flow Data_dtime formatted',file=paste(listcsv[k],"dttime",".csv"))
}
for (k in 1:length(listcsv)){
data = read.csv(listcsv[k])
data$X=as.character(data$X)
data$date.time=as.POSIXct(strptime(data$X, format="%Y-%m-%d %H:%M:%S"))
data = subset(data, select = -c(X) )
col_idx <- grep("date.time", names(data))
data <- data[, c(col_idx, (1:ncol(data))[-col_idx])]
write.csv(df,'C:/Users/garrett.mcgurk/Documents/GitHub/R-Shiny-Apps/Applications/Full_QC_App/Data/Flow Data_dtime formatted',file=paste(listcsv[k],"dttime",".csv"))
}
setwd("~/GitHub/R-Shiny-Apps/Applications/Full_QC_App/Data/Flow Data/")
ldf <- list() # creates a list
listcsv <- dir(pattern = "*.csv") # creates the list of all the csv files in the directory
for (k in 1:length(listcsv)){
data = read.csv(listcsv[k])
data$X=as.character(data$X)
data$date.time=as.POSIXct(strptime(data$X, format="%Y-%m-%d %H:%M:%S"))
data = subset(data, select = -c(X) )
col_idx <- grep("date.time", names(data))
data <- data[, c(col_idx, (1:ncol(data))[-col_idx])]
write.csv(df,'C:/Users/garrett.mcgurk/Documents/GitHub/R-Shiny-Apps/Applications/Full_QC_App/Data/Flow Data_dtime formatted',file=paste(listcsv[k],"dttime",".csv"))
}
k=1
data = read.csv(listcsv[k])
data$X=as.character(data$X)
data$date.time=as.POSIXct(strptime(data$X, format="%Y-%m-%d %H:%M:%S"))
data = subset(data, select = -c(X) )
col_idx <- grep("date.time", names(data))
data <- data[, c(col_idx, (1:ncol(data))[-col_idx])]
write.csv(df,'C:/Users/garrett.mcgurk/Documents/GitHub/R-Shiny-Apps/Applications/Full_QC_App/Data/Flow Data_dtime formatted',file=paste(listcsv[k],"dttime",".csv"))
for (k in 1:length(listcsv)){
data = read.csv(listcsv[k])
data$X=as.character(data$X)
data$date.time=as.POSIXct(strptime(data$X, format="%Y-%m-%d %H:%M:%S"))
data = subset(data, select = -c(X) )
col_idx <- grep("date.time", names(data))
data <- data[, c(col_idx, (1:ncol(data))[-col_idx])]
write.csv(data,'C:/Users/garrett.mcgurk/Documents/GitHub/R-Shiny-Apps/Applications/Full_QC_App/Data/Flow Data_dtime formatted',file=paste(listcsv[k],"dttime",".csv"))
}
k=1
for (k in 1:length(listcsv)){
data = read.csv(listcsv[k])
data$X=as.character(data$X)
data$date.time=as.POSIXct(strptime(data$X, format="%Y-%m-%d %H:%M:%S"))
data = subset(data, select = -c(X) )
col_idx <- grep("date.time", names(data))
data <- data[, c(col_idx, (1:ncol(data))[-col_idx])]
write.csv(data,'~/GitHub/R-Shiny-Apps/Applications/Full_QC_App/Data/Flow Data_dtime formatted',file=paste(listcsv[k],"dttime",".csv"))
}
write.csv(data,'~/GitHub/R-Shiny-Apps/Applications/Full_QC_App/Data/Flow Data_dtime formatted/',file=paste(listcsv[k],"dttime",".csv"))
for (k in 1:length(listcsv)){
data = read.csv(listcsv[k])
data$X=as.character(data$X)
data$date.time=as.POSIXct(strptime(data$X, format="%Y-%m-%d %H:%M:%S"))
data = subset(data, select = -c(X) )
col_idx <- grep("date.time", names(data))
data <- data[, c(col_idx, (1:ncol(data))[-col_idx])]
write.csv(data,'~/GitHub/R-Shiny-Apps/Applications/Full_QC_App/Data/Flow Data_dtime formatted/',file=paste(listcsv[k],"dttime",".csv"))
}
for (k in 1:length(listcsv)){
data = read.csv(listcsv[k])
data$X=as.character(data$X)
data$date.time=as.POSIXct(strptime(data$X, format="%Y-%m-%d %H:%M:%S"))
data = subset(data, select = -c(X) )
col_idx <- grep("date.time", names(data))
data <- data[, c(col_idx, (1:ncol(data))[-col_idx])]
write.csv(data,file=paste("~/GitHub/R-Shiny-Apps/Applications/Full_QC_App/Data/Flow Data_dtime formatted/",listcsv[k],"dttime",".csv"))
}
df2 <- data %>%
#select(date.time, input$checkGroup) %>%
gather(key = "variable", value = "value", -date.time)
return(df2)
df2
View(data)
df2 <- data %>%
select(date.time, Level_in,Level_in_clipped,Flow..gpm.,Flow..gpm..no.stormflow,Flow..gpm..USBR) %>%
gather(key = "variable", value = "value", -date.time)
for (k in 1:length(listcsv)){
data = read.csv(listcsv[k])
data$X=as.character(data$X)
data$date.time=as.POSIXct(strptime(data$X, format="%Y-%m-%d %H:%M:%S"))
data = subset(data, select = -c(X) )
col_idx <- grep("date.time", names(data))
data <- data[, c(col_idx, (1:ncol(data))[-col_idx])]
#make it long
df2 <- data %>%
select(date.time, Level_in,Level_in_clipped,Flow..gpm.,Flow..gpm..no.stormflow,Flow..gpm..USBR) %>%
gather(key = "variable", value = "value", -date.time)
write.csv(df2,file=paste("~/GitHub/R-Shiny-Apps/Applications/Full_QC_App/Data/Flow Data_dtime formatted/",listcsv[k],"dttime",".csv"))
}
setwd("~/GitHub/R-Shiny-Apps/Applications/Full_QC_App/Data/Flow Data/")
ldf <- list() # creates a list
listcsv <- dir(pattern = "*.csv") # creates the list of all the csv files in the directory
for (k in 1:length(listcsv)){
data = read.csv(listcsv[k])
data$X=as.character(data$X)
data$date.time=as.POSIXct(strptime(data$X, format="%Y-%m-%d %H:%M:%S"))
data = subset(data, select = -c(X) )
col_idx <- grep("date.time", names(data))
data <- data[, c(col_idx, (1:ncol(data))[-col_idx])]
#make it long
df2 <- data %>%
select(date.time, Level_in,Level_in_clipped,Flow..gpm.,Flow..gpm..no.stormflow,Flow..gpm..USBR) %>%
gather(key = "variable", value = "value", -date.time)
write.csv(df2,file=paste("~/GitHub/R-Shiny-Apps/Applications/Full_QC_App/Data/Flow Data_dtime formatted/",listcsv[k],"dttime",".csv"))
}
for (k in 1:length(listcsv)){
data = read.csv(listcsv[k])
data$X=as.character(data$X)
data$date.time=as.POSIXct(strptime(data$X, format="%Y-%m-%d %H:%M:%S"))
data = subset(data, select = -c(X) )
col_idx <- grep("date.time", names(data))
data <- data[, c(col_idx, (1:ncol(data))[-col_idx])]
#make it long
df2 <- data %>%
select(date.time, Level_in,Level_in_clipped,Flow..gpm.,Flow..gpm..no.stormflow,Flow..gpm..USBR) %>%
gather(key = "variable", value = "value", -date.time)
write.csv(df2,file=paste("~/GitHub/R-Shiny-Apps/Applications/Full_QC_App/Data/Flow Data_dtime formatted/",listcsv[k],"dttime",".csv"))
}
for (k in 1:length(listcsv)){
data = read.csv(listcsv[k])
data$X=as.character(data$X)
data$date.time=as.POSIXct(strptime(data$X, format="%Y-%m-%d %H:%M:%S"))
data = subset(data, select = -c(X) )
col_idx <- grep("date.time", names(data))
data <- data[, c(col_idx, (1:ncol(data))[-col_idx])]
#make it long
df2 <- data %>%
select(date.time, Level_in,Level_in_clipped,Flow..gpm.,Flow..gpm..no.stormflow,Flow..gpm..USBR) %>%
gather(key = "variable", value = "value", -date.time)
write.csv(df2,file=paste("~/GitHub/R-Shiny-Apps/Applications/Full_QC_App/Data/Flow Data_dtime formatted/",listcsv[k],"dttime",".csv"))
}
for (k in 1:length(listcsv)){
data = read.csv(listcsv[k])
data$X=as.character(data$X)
data$date.time=as.POSIXct(strptime(data$X, format="%Y-%m-%d %H:%M:%S"))
data = subset(data, select = -c(X) )
col_idx <- grep("date.time", names(data))
data <- data[, c(col_idx, (1:ncol(data))[-col_idx])]
#make it long
df2 <- data %>%
select(date.time, Level_in,Level_in_clipped,Flow..gpm.,Flow..gpm..no.stormflow,Flow..gpm..USBR) %>%
gather(key = "variable", value = "value", -date.time)
write.csv(df2,file=paste("~/GitHub/R-Shiny-Apps/Applications/Full_QC_App/Data/Flow Data_pre_processed/",listcsv[k],"dttime",".csv"))
}
X2019_MS4_Sites <- read_excel("Data/2019_MS4 Sites.xlsx")
#X2019_MS4_Sites <- read_excel("Data/2019_MS4 Sites.xlsx")
X2019_MS4_Sites <- read_excel("~/GitHub/R-Shiny-Apps/Applications/Full_QC_App/Data/2019_MS4 Sites.xlsx")
sites.2019= X2019_MS4_Sites [c(9,14)]
sites.2019=as.data.frame(sites.2019)
sites.2019$lng=sapply(strsplit(sites.2019$`ns1:coordinates`,","),"[",1)
sites.2019$lat=sapply(strsplit(sites.2019$`ns1:coordinates`,","),"[",2)
sites.2019$lng=as.numeric(sites.2019$lng)
sites.2019$lat=as.numeric(sites.2019$lat)
sites.2019
View(sites.2019)
library(dplyr)
sites.2019=distinct(sites.2019,ns1:name3, .keep_all= TRUE)
sites.2019=distinct(sites.2019,'ns1:name3', .keep_all= TRUE)
sites.2019
distinct(sites.2019,'ns1:name3', .keep_all= TRUE)
#X2019_MS4_Sites <- read_excel("Data/2019_MS4 Sites.xlsx")
X2019_MS4_Sites <- read_excel("~/GitHub/R-Shiny-Apps/Applications/Full_QC_App/Data/2019_MS4 Sites.xlsx")
sites.2019= X2019_MS4_Sites [c(9,14)]
sites.2019=as.data.frame(sites.2019)
sites.2019$lng=sapply(strsplit(sites.2019$`ns1:coordinates`,","),"[",1)
sites.2019$lat=sapply(strsplit(sites.2019$`ns1:coordinates`,","),"[",2)
sites.2019$lng=as.numeric(sites.2019$lng)
sites.2019$lat=as.numeric(sites.2019$lat)
sites.2019
distinct(sites.2019,'ns1:name3', .keep_all= TRUE)
#X2019_MS4_Sites <- read_excel("Data/2019_MS4 Sites.xlsx")
X2019_MS4_Sites <- read_excel("~/GitHub/R-Shiny-Apps/Applications/Full_QC_App/Data/2019_MS4 Sites.xlsx")
sites.2019= X2019_MS4_Sites [c(9,14)]
sites.2019=as.data.frame(sites.2019)
sites.2019$lng=sapply(strsplit(sites.2019$`ns1:coordinates`,","),"[",1)
sites.2019$lat=sapply(strsplit(sites.2019$`ns1:coordinates`,","),"[",2)
sites.2019$lng=as.numeric(sites.2019$lng)
sites.2019$lat=as.numeric(sites.2019$lat)
sites.2019[!duplicated(sites.2019$`ns1:name3`), ]
sites.2019 = subset(sites.2019, select = -c('ns1:coordinates') )
sites.2019 = subset(sites.2019, select = -c(ns1:coordinates) )
sites.2019 = subset(sites.2019, select = -c('ns1:coordinates') )
write.csv(sites.2019,file="~/GitHub/R-Shiny-Apps/Applications/Full_QC_App/Data/2019_MS4_sites_formatted")
for (k in 1:length(listcsv)){
data = read.csv(listcsv[k])
data$X=as.character(data$X)
data$date.time=as.POSIXct(strptime(data$X, format="%Y-%m-%d %H:%M:%S"))
data = subset(data, select = -c(X) )
col_idx <- grep("date.time", names(data))
data <- data[, c(col_idx, (1:ncol(data))[-col_idx])]
#make it long
df2 <- data %>%
select(date.time, Level_in,Level_in_clipped,Flow..gpm.,Flow..gpm..no.stormflow,Flow..gpm..USBR) %>%
gather(key = "variable", value = "value", -date.time)
write.csv(df2,file=paste("~/GitHub/R-Shiny-Apps/Applications/Full_QC_App/Data/Flow Data_pre_processed/",listcsv[k]))
}
write.csv(sites.2019,file="~/GitHub/R-Shiny-Apps/Applications/Full_QC_App/Data/2019_MS4_sites_formatted.csv")
for (k in 1:length(listcsv)){
data = read.csv(listcsv[k])
data$X=as.character(data$X)
data$date.time=as.POSIXct(strptime(data$X, format="%Y-%m-%d %H:%M:%S"))
data = subset(data, select = -c(X) )
col_idx <- grep("date.time", names(data))
data <- data[, c(col_idx, (1:ncol(data))[-col_idx])]
#make it long
df2 <- data %>%
select(date.time, Level_in,Level_in_clipped,Flow..gpm.,Flow..gpm..no.stormflow,Flow..gpm..USBR) %>%
gather(key = "variable", value = "value", -date.time)
write.csv(df2,file=paste("~/GitHub/R-Shiny-Apps/Applications/Full_QC_App/Data/Flow Data_pre_processed/",listcsv[k]))
}
`2019_MS4_sites` <- read.csv("~/GitHub/R-Shiny-Apps/Applications/Full_QC_APP_V2/Data/2019_MS4_sites.csv")
View(`2019_MS4_sites`)
X2019_MS4_Sites <- read_excel("Data/2019_MS4 Sites.xlsx")
`2019_MS4_sites` <- read.csv("~/GitHub/R-Shiny-Apps/Applications/Full_QC_APP_V2/Data/2019_MS4_sites.csv")
sites.2019 <- read.csv("~/GitHub/R-Shiny-Apps/Applications/Full_QC_APP_V2/Data/2019_MS4_sites.csv")
View(sites.2019)
sites.test <- read.csv("~/GitHub/R-Shiny-Apps/Applications/Full_QC_APP_V2/Data/2019_MS4_sites.csv")
View(sites.test)
sites.test <- read.csv("Data/2019_MS4 Sites.xlsx")
sites.test <- read.csv("Data/2019_MS4_sites.xlsx")
sites.test <- read.csv("Data/2019_MS4_sites.csv")
sites.test <- read.csv("Data/2019_MS4_sites.csv")
getwd
getwd()
`2019_MS4_sites.csv` <- read.csv("~/GitHub/R-Shiny-Apps/Applications/Full_QC_APP_V2/Data/2019_MS4_sites.csv.csv")
View(`2019_MS4_sites.csv`)
`2019_MS4_sites.csv` <- read.csv("~/GitHub/R-Shiny-Apps/Applications/Full_QC_APP_V2/Data/2019_MS4_sites.csv")
sites.test <- read.csv("~/GitHub/R-Shiny-Apps/Applications/Full_QC_APP_V2/Data/2019_MS4_sites.csv")
View(sites.test)
sites.test <- read.csv("~/GitHub/R-Shiny-Apps/Applications/Full_QC_APP_V2/Data/2019_MS4_sites.csv")
View(sites.test)
rm(list = ls())
sites.test <- read.csv("~/GitHub/R-Shiny-Apps/Applications/Full_QC_APP_V2/Data/2019_MS4_sites.csv")
sites.2019 <- read.csv("~/GitHub/R-Shiny-Apps/Applications/Full_QC_APP_V2/Data/2019_MS4_sites.csv")
sites.2019
sites.2019 [c(1:3)]
class(sites.2019$lng)
runApp('~/GitHub/R-Shiny-Apps/Applications/Full_QC_APP_V2')
View(sites.2019)
View(sites.2019)
site_id="CAR-070"
site.subset=sites.2019[grep(site_id, sites.2019$`ns1:name3`),]
site.subset
runApp('~/GitHub/R-Shiny-Apps/Applications/Full_QC_APP_V2')
runApp('~/GitHub/R-Shiny-Apps/Applications/Full_QC_APP_V2')
.CAR.015.Flow <- read.csv("~/GitHub/R-Shiny-Apps/Applications/Full_QC_App/Data/Flow Data_pre_processed/ CAR-015-Flow.csv")
View(.CAR.015.Flow)
.CAR.015.Flow <- read.csv("~/GitHub/R-Shiny-Apps/Applications/Full_QC_App/Data/Flow Data_pre_processed/ CAR-015-Flow.csv")
.CAR.015.Flow
subby=.CAR.015.Flow[.CAR.015.Flow$variable == "Level_in", "Level_in_clipped",]
.CAR.015.Flow = read.csv("~/GitHub/R-Shiny-Apps/Applications/Full_QC_App/Data/Flow Data_pre_processed/ CAR-015-Flow.csv")
CAR.015.Flow = read.csv("~/GitHub/R-Shiny-Apps/Applications/Full_QC_App/Data/Flow Data_pre_processed/ CAR-015-Flow.csv")
subby=CAR.015.Flow[.CAR.015.Flow$variable == "Level_in", "Level_in_clipped",]
subby=CAR.015.Flow[.CAR.015.Flow$variable == 'Level_in', 'Level_in_clipped',]
subby=CAR.015.Flow[.CAR.015.Flow$variable == 'Level_in',]# 'Level_in_clipped',]
View(subby)
subby=CAR.015.Flow[.CAR.015.Flow$variable == c('Level_in','Level_in_clipped'),]# 'Level_in_clipped',]
suy=CAR.015.Flow[.CAR.015.Flow$variable == c('Level_in','Level_in_clipped'),]# 'Level_in_clipped',]
View(suy)
runApp('~/GitHub/R-Shiny-Apps/Applications/Full_QC_APP_V2')
runApp()
runApp()
rm(list = ls())
runApp('~/GitHub/R-Shiny-Apps/Applications/Full_QC_APP_V2')
runApp()
runApp()
runApp()
runApp('~/GitHub/R-Shiny-Apps/Applications/Full_QC_APP_V2')
runApp()
runApp('~/GitHub/R-Shiny-Apps/Applications/Full_QC_APP_V2')
Flow.plot.data = Flow.data()
site_id = site_id()
Flow.data.long <- reactive({
filtered.df = Flow.plot.data[Flow.plot.data$variable ==
c(input$checkGroup), ]
return(filtered.df)
})
df2 = Flow.data.long()
Flow.data.long()
filtered.df = Flow.plot.data[Flow.plot.data$variable ==
c(input$checkGroup), ]
Flow.plot.data
runApp()
runApp('~/GitHub/R-Shiny-Apps/Applications/Full_QC_APP_V2')
runApp('~/GitHub/R-Shiny-Apps/Applications/Full_QC_APP_V2')
